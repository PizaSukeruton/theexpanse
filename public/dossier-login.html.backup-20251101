<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>C_O_T_W Dossier System â€” Council Of The Wise</title>
  <style>
    :root {
      --bg: #000000;
      --accent: #00ff75;
      --fg: #00ff75;
      --shadow: 0 0 24px rgba(0,255,0,0.25), 0 0 64px rgba(0,255,0,0.1);
      --radius: 16px;
      --gap: 16px;
    }
    html, body { height: 100%; }
    body {
      margin: 0;
      background: var(--bg);
      color: var(--fg);
      font-family: "Courier New", "IBM Plex Mono", ui-monospace, monospace;
      letter-spacing: 0.2px;
      overflow: hidden;
    }

    .crt { position: relative; filter: contrast(1.05) saturate(1.1); text-shadow: 0 0 1px rgba(0,255,0,0.45), 0 0 8px rgba(0,255,0,0.12); }
    .crt::after { content:""; pointer-events:none; position:absolute; inset:0;
      background: repeating-linear-gradient(to bottom, rgba(0,255,0,0.06) 0 2px, transparent 2px 4px);
      mix-blend-mode: screen;
    }

    .app { display:grid; grid-template-columns:1fr 1.1fr; gap:var(--gap); height:100vh; padding:16px; box-sizing:border-box; }

    .panel {
      border: 1px solid var(--accent);
      border-radius: var(--radius);
      padding: 16px;
      box-shadow: var(--shadow);
      background: rgba(0,32,0,0.28);
      position: relative;
      overflow: hidden;
    }

    .left-panel { display:grid; grid-template-rows:auto 1fr auto; gap:12px; }
    .dossier-stack { display:grid; grid-template-rows:auto auto; gap:12px; position:relative; }

    .panel-box { position: relative; border: 1px solid var(--accent); border-radius: 12px; padding: 0; box-shadow: var(--shadow); background: rgba(0,16,0,0.25); }
    .portrait-wrap { height: 220px; }
    .portrait { width: 100%; height:100%; object-fit: contain; object-position: center 30%; border-radius: 12px; filter: grayscale(20%) contrast(1.05); }

    .info-box { padding:12px; }
    .info-grid { display:grid; grid-template-columns: 1fr 1fr; gap: 8px 16px; }
    .info-k {}
    .info-v { font-weight: bold; }
    .summary { margin-top: 10px; }

    .notes-box { border:1px solid var(--accent); border-radius:12px; padding:12px; background: rgba(0,16,0,0.25); box-shadow: var(--shadow); }
    .notes-box textarea { width:100%; min-height:120px; resize:vertical; background:transparent; border:none; outline:none; color:var(--fg); font:inherit; line-height:1.35; }

    .right-panel { display:grid; grid-template-rows:auto 1fr auto; gap:12px; }
    .hud { position: static; padding:10px 14px; border:1px solid var(--accent); border-radius:12px; background: rgba(0,255,0,0.04); font-weight:600; }
    .hud small { font-weight:400; opacity:1; }

    .chat-log { border:1px solid var(--accent); border-radius:12px; padding:12px; background: rgba(0,16,0,0.25); box-shadow: var(--shadow); overflow-y:auto; padding-bottom:32px; }
    .line { white-space: pre-wrap; word-break: break-word; margin: 6px 0; }
    .line .tag { margin-right: 6px; }
    .line.granted { font-weight: bold; }
    .line.error { color: #ff4444; }

    .chat-input-bar { display:grid; grid-template-columns: 1fr auto; gap:8px; align-items:center; }
    input[type="text"], input[type="password"] {
      background: rgba(0,16,0,0.25); border:1px solid var(--accent); border-radius:12px; outline:none; color:var(--fg); padding:12px 14px; font:inherit; box-shadow: var(--shadow);
    }
    button { background:transparent; border:1px solid var(--accent); color:var(--fg); padding:10px 14px; border-radius:12px; font:inherit; cursor:pointer; box-shadow:var(--shadow); transition: transform 80ms ease, background 120ms ease; }
    button:hover { transform: translateY(-1px); background: rgba(0,255,0,0.06); }

    .blink-caret { display:inline-block; width:10px; height:1.2em; background:var(--fg); animation: blink 1s steps(2,start) infinite; vertical-align:baseline; }
    @keyframes blink { 0%{opacity:0} 50%{opacity:1} 100%{opacity:0} }

    .dossier-cover {
      position:absolute; inset:16px;
      display:grid; place-items:center;
      pointer-events:auto;
      background:
        linear-gradient(180deg, rgba(0,14,0,0.98), rgba(0,0,0,1)),
        radial-gradient(90% 60% at 50% 35%, rgba(0,255,0,0.10), transparent 60%);
      border:2px solid var(--accent);
      border-radius:12px;
      box-shadow:
        0 0 22px rgba(0,255,117,0.28),
        inset 0 0 18px rgba(0,255,117,0.18);
      transform: translateY(0);
      transition: transform .7s ease-in-out;
      z-index: 9;
    }
    .dossier-cover::before {
      content:"";
      position:absolute; inset:0;
      background:
        repeating-linear-gradient(to bottom, rgba(0,255,0,0.18) 0 2px, rgba(0,0,0,0.0) 2px 4px),
        linear-gradient(180deg, rgba(0,255,0,0.10), rgba(0,0,0,0) 35%, rgba(0,0,0,0.35) 85%, rgba(0,0,0,0.9) 100%);
      mix-blend-mode: screen;
      border-radius:12px;
      pointer-events:none;
    }
    .dossier-cover.open { transform: translateY(-104%); pointer-events:none; }

    .cover-inner { text-align:center; padding: 28px 18px; }
    .cover-title { font-weight: 900; font-size: 28px; letter-spacing: 2px; }
    .cover-sub   { margin-top: 8px;  font-weight: 800; font-size: 18px; }
    .cover-instr { margin-top: 20px; font-weight: 800; font-size: 14px; line-height: 1.5; }

    @media (max-width: 1000px) {
      .app { grid-template-columns:1fr; overflow-y:auto; height:auto; min-height:100vh; }
      body { overflow:auto; }
    }
    @media (max-width: 480px) {
      .panel { padding:12px; }
      .dossier-cover { inset:12px; }
      .portrait-wrap { height:180px; }
      input, button { font-size:14px; }
      .cover-title { font-size:22px; }
    }
  </style>
</head>
<body>
  <div class="app crt" id="app">

    <section class="panel left-panel" id="dossier-panel" aria-live="polite">
      <div class="dossier-stack">
        <div class="panel-box portrait-wrap">
          <img src="/gallery/pizasukerutonprofile.png" alt="Agent Portrait" class="portrait" id="agent-portrait" />
        </div>

        <div class="panel-box">
          <div class="info-box">
            <div class="info-grid">
              <div class="info-k">NAME</div><div class="info-v" id="f-name"></div>
              <div class="info-k">ENTITY</div><div class="info-v" id="f-entity"></div>
              <div class="info-k">DEPARTMENT</div><div class="info-v" id="f-dept"></div>
              <div class="info-k">SECURITY LEVEL</div><div class="info-v" id="f-sec"></div>
            </div>
            <div class="summary" id="summary">Summary:</div>
          </div>
        </div>
      </div>

      <div id="dossier-cover" class="dossier-cover" aria-hidden="false">
        <div class="cover-inner">
          <div class="cover-title">COUNCIL OF THE WISE</div>
          <div class="cover-sub">EYES ONLY</div>
          <div class="cover-instr">AUTHENTICATE CREDENTIALS<br>TO ACCESS</div>
        </div>
      </div>
    </section>

    <section class="panel right-panel" id="chat-panel">
      <div class="hud">TERMINAL :: CHAT <small>AUTH + COMMAND</small></div>
      <div class="chat-log" id="chat-log" role="log" aria-live="polite"></div>
      <div class="chat-input-bar">
        <input type="text" name="decoy-user" autocomplete="username" tabindex="-1" style="position:absolute;left:-9999px;width:1px;height:1px;" />
        <input type="password" name="decoy-pass" autocomplete="current-password" tabindex="-1" style="position:absolute;left:-9999px;width:1px;height:1px;" />
        <input id="chat-input" name="terminal-entry" type="text" placeholder="> Enter username" autocomplete="off" data-lpignore="true" data-bwignore="true" data-1p-ignore="true" />
        <button id="send-btn" type="button">Send</button>
      </div>
    </section>

  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const input = document.getElementById('chat-input');
    const button = document.getElementById('send-btn');
    const chatLog = document.getElementById('chat-log');
    const cover = document.getElementById('dossier-cover');

    let loginState = "username";
    let currentUser = null;
    let tempUsername = "";

    function addLine(text, cls = "") {
      const line = document.createElement('div');
      line.className = 'line ' + cls;
      line.textContent = text;
      chatLog.appendChild(line);
      chatLog.scrollTop = chatLog.scrollHeight;
    }

    function typeText(elementId, text, delay = 50) {
      const elem = document.getElementById(elementId);
      elem.textContent = '';
      let index = 0;
      
      function addChar() {
        if (index < text.length) {
          elem.textContent += text[index];
          index++;
          setTimeout(addChar, delay);
        }
      }
      addChar();
    }

    function populateDossier(data) {
      const char = data.character;
      setTimeout(() => typeText('f-name', char.name || 'UNKNOWN', 60), 100);
      setTimeout(() => typeText('f-entity', char.entity || 'CLASSIFIED', 60), 500);
      setTimeout(() => typeText('f-dept', char.department || 'CLASSIFIED', 60), 900);
      setTimeout(() => typeText('f-sec', char.access_level || 'UNKNOWN', 60), 1400);
      setTimeout(() => typeText('summary', char.summary || 'Summary: [CLASSIFIED]', 60), 1800);
    }

    socket.on('auth-response', (data) => {
      if (data.success) {
        addLine("SYSTEM: " + data.message, "granted");
        currentUser = data.user;
        loginState = "command";
        input.type = "text";
        input.placeholder = "> Enter command";
        input.value = "";
      } else {
        addLine("SYSTEM: " + data.message, "error");
        loginState = "username";
        input.type = "text";
        input.placeholder = "> Enter username";
        input.value = "";
        tempUsername = "";
      }
    });

    socket.on('command-response', (data) => {
      if (data.error) {
        addLine("SYSTEM: " + data.error, "error");
      } else if (data.clear) {
        document.getElementById("chat-log").innerHTML = "";
        return;
      } else if (data.logout) {
        addLine("SYSTEM: " + data.output);
        setTimeout(() => location.reload(), 1000);
        return;
      } else {
        addLine(data.output || ("SYSTEM: " + data.message));

        if (data.image) {
          const imgDiv = document.createElement('div');
          imgDiv.className = 'terminal-image';
          imgDiv.innerHTML = `<img src="${data.image}" alt="Character Image" style="max-width: 300px; margin: 10px 0;">`;
          document.getElementById('chat-log').appendChild(imgDiv);
        }
        
        if (data.type === 'dossier-request' && data.name) {
          socket.emit('get-dossier', { name: data.name });
        }
      }
    });

    socket.on('dossier-data', (data) => {
      if (data.success) {
        addLine("SYSTEM: Opening dossier...");
        cover.classList.add('open');
        populateDossier(data);
      } else if (data.message) {
        addLine(data.output || ("SYSTEM: " + data.message));
      } else if (data.error) {
        addLine("SYSTEM: " + data.error, "error");
      }
    });

    socket.on('new-message', (data) => {
      addLine(`[${data.username}]: ${data.message}`);
    });

    function handleInput(value) {
      if (loginState === "username") {
        addLine("> " + value);
        tempUsername = value;
        loginState = "password";
        input.type = "password";
        input.placeholder = "> Enter password";
        input.value = "";
      } else if (loginState === "password") {
        addLine("> ********");
        socket.emit('terminal-auth', {
          username: tempUsername,
          password: value
        });
      } else if (loginState === "command") {
        addLine("> " + value);
        socket.emit('terminal-command', { command: value });
        input.value = "";
      }
    }

    function submitInput() {
      const val = input.value.trim();
      if (val) {
        handleInput(val);
        if (loginState !== "command") {
          input.value = "";
        }
      }
    }

    input.addEventListener('keydown', (e) => { if (e.key === 'Enter') submitInput(); });
    button.addEventListener('click', submitInput);

    input.addEventListener('focus', function() {
      this.removeAttribute('readonly');
    });

    addLine("SYSTEM: Terminal ready. Please authenticate.");
  </script>
</body>
</html>
