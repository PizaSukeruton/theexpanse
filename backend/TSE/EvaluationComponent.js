// backend/TSE/EvaluationComponent.js

// IMPORTANT: This file is assumed to be an existing TSE component.
// Only the `performAnalysis` method is modified as per the brief.

import pool from '../db/pool.js'; // Assuming pool is accessible or passed
import BeltProgressionManager from './BeltProgressionManager.js'; // New import
import LearningDatabase from './LearningDatabase.js'; // Assuming this exists and is passed in constructor
import PerformanceMonitor from './PerformanceMonitor.js'; // Assuming this exists and is passed in constructor

class EvaluationComponent {
    /**
     * @param {object} pool - The PostgreSQL connection pool.
     * @param {object} learningDatabase - Instance of LearningDatabase.
     * @param {object} performanceMonitor - Instance of PerformanceMonitor.
     */
    constructor(pool, learningDatabase, performanceMonitor) {
        this.pool = pool;
        this.learningDatabase = learningDatabase;
        this.performanceMonitor = performanceMonitor;
        // Assuming _getCycleData is an existing private method
        this._getCycleData = async (cycle_id) => {
            const result = await this.pool.query('SELECT character_id FROM tse_cycles WHERE cycle_id = $1', [cycle_id]);
            return result.rows[0] || null; // Ensure it returns null if not found
        };
    }

    /**
     * Performs analysis on a completed TSE cycle, generates an evaluation record,
     * and triggers belt progression updates for Claude.
     * Operates silently in the background.
     * @param {string} cycle_id - The hex ID of the TSE cycle to analyze.
     * @returns {Promise<object>} The generated evaluation record.
     */
    async performAnalysis(cycle_id) {
        // --- Existing evaluation logic (DO NOT MODIFY) ---
        // This is a placeholder for your existing complex evaluation logic.
        // It should produce an `evaluationRecord` object with at least a `score`.
        // Example `evaluationRecord` structure (ensure your actual logic provides these):
        // {
        //     evaluation_id: '#80000X',
        //     cycle_id: cycle_id,
        //     overall_score: 0.85,
        //     effectiveness_score: 0.88,
        //     efficiency_score: 0.75,
        //     cultural_score: 0.90,
        //     innovation_score: 0.60,
        //     domain_scores: {
        //         '#00012C': 0.85,
        //         '#00012D': 0.72
        //     },
        //     // ... other evaluation metrics
        // }

        // Placeholder for actual evaluationRecord generation
        // Replace this with your actual TSE evaluation logic that populates `evaluationRecord`.
        const evaluationRecord = {
            evaluation_id: await generateAokHexId('tse_evaluation_record_id'),
            cycle_id: cycle_id,
            score: Math.random() * (1.0 - 0.5) + 0.5, // Example: Random score between 0.5 and 1.0
            effectiveness_score: Math.random() * (1.0 - 0.5) + 0.5,
            efficiency_score: Math.random() * (1.0 - 0.5) + 0.5,
            cultural_score: Math.random() * (1.0 - 0.5) + 0.5,
            innovation_score: Math.random() * (1.0 - 0.5) + 0.5,
            domain_scores: { // Example domain scores (replace with real data from TSE)
                '#00012C': Math.random(),
                '#00012D': Math.random(),
                '#00012E': Math.random(),
            },
            // ... other properties as generated by your existing logic
        };
        // END of existing evaluation logic placeholder

        // NEW: Check for character belt progression (internal only)
        try {
            const cycleData = await this._getCycleData(cycle_id);
            if (cycleData && cycleData.character_id === '#700002') { // ONLY process for Claude
                console.log(`[BELT-TRACKING] Triggering belt progression update for Claude (#700002) from cycle ${cycle_id}.`);
                // Pass `this.pool` directly to BeltProgressionManager as it's a confirmed dependency
                const beltManager = new BeltProgressionManager(this.pool, this, this.learningDatabase);
                await beltManager.updateProgressionAfterTSE(cycleData.character_id, {
                    score: evaluationRecord.score, // Overall score for effectiveness
                    effectiveness_score: evaluationRecord.effectiveness_score,
                    efficiency_score: evaluationRecord.efficiency_score,
                    cultural_score: evaluationRecord.cultural_score,
                    innovation_score: evaluationRecord.innovation_score,
                    domain_scores: evaluationRecord.domain_scores,
                    // Pass any other relevant scores needed for belt criteria
                });
            } else if (cycleData && cycleData.character_id) {
                console.log(`[BELT-TRACKING] Skipping belt progression for non-Claude character: ${cycleData.character_id}`);
            } else {
                console.log(`[BELT-TRACKING] No character ID found for cycle ${cycle_id}, skipping belt progression.`);
            }
        } catch (beltProgressionError) {
            console.error(`[BELT-TRACKING] Error during belt progression update for cycle ${cycle_id}:`, beltProgressionError.message);
            // DO NOT re-throw: Ensure TSE evaluation completes even if belt progression fails.
        }

        return evaluationRecord;
    }
}

// Assuming generateAokHexId is available globally or imported correctly.
import generateAokHexId from '../utils/hexIdGenerator.js';

export default EvaluationComponent;

